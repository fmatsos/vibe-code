# Makefile pour le projet Daily Organizer

# D√©sactive l'affichage des commandes ex√©cut√©es
.SILENT:

# Emp√™che make de confondre les cibles avec des fichiers du m√™me nom
.PHONY: help start stop restart build sh-php sh-node composer-install composer-update npm-install debug-on debug-off test lint

# Commande par d√©faut, affiche l'aide
help:
	@echo "Commandes disponibles :"
	@echo "  start          : D√©marre les conteneurs Docker en arri√®re-plan."
	@echo "  stop           : Arr√™te et supprime les conteneurs Docker."
	@echo "  restart        : Red√©marre les services."
	@echo "  build          : Force la reconstruction des images Docker."
	@echo "  sh-php         : Ouvre un shell bash dans le conteneur PHP."
	@echo "  sh-node        : Ouvre un shell bash dans le conteneur Node.js."
	@echo "  composer-install: Installe les d√©pendances PHP via Composer."
	@echo "  composer-update : Met √† jour les d√©pendances PHP via Composer."
	@echo "  npm-install    : Installe les d√©pendances Node.js via npm."
	@echo "  debug-on       : Active Xdebug et red√©marre le conteneur PHP."
	@echo "  debug-off      : D√©sactive Xdebug et red√©marre le conteneur PHP."
	@echo "  test           : (Placeholder) Lance la suite de tests."
	@echo "  lint           : (Placeholder) Lance les linters de code."


# ==============================================================================
# GESTION DE L'ENVIRONNEMENT DOCKER
# ==============================================================================

start:
	@echo "üöÄ D√©marrage des conteneurs..."
	sudo docker compose up -d --build

stop:
	@echo "üõë Arr√™t des conteneurs..."
	sudo docker compose down

restart: stop start

build:
	@echo "üõ†Ô∏è Reconstruction des images..."
	sudo docker compose build --no-cache


# ==============================================================================
# ACC√àS AUX CONTENEURS
# ==============================================================================

sh-php:
	@echo "Connexion au conteneur PHP..."
	sudo docker compose exec php bash

sh-node:
	@echo "Connexion au conteneur Node.js..."
	sudo docker compose exec node bash


# ==============================================================================
# GESTION DES D√âPENDANCES
# ==============================================================================

composer-install:
	@echo "Installation des d√©pendances Composer..."
	sudo docker compose exec php composer install

composer-update:
	@echo "Mise √† jour des d√©pendances Composer..."
	sudo docker compose exec php composer update

npm-install:
	@echo "Installation des d√©pendances NPM..."
	sudo docker compose exec node npm install


# ==============================================================================
# CONTR√îLE DE XDEBUG
# ==============================================================================

debug-on:
	@echo "‚úÖ Activation de Xdebug et red√©marrage du service PHP..."
	XDEBUG_MODE=debug sudo docker compose up -d --build php

debug-off:
	@echo "‚ùå D√©sactivation de Xdebug et red√©marrage du service PHP..."
	XDEBUG_MODE=off sudo docker compose up -d --build php


# ==============================================================================
# QUALIT√â ET TESTS (√† d√©finir plus tard)
# ==============================================================================

test:
	@echo "Lancement des tests (PHPUnit)..."
	# docker compose exec php ./vendor/bin/phpunit

lint:
	@echo "Analyse du code (PHPStan & ECS)..."
	# docker compose exec php ./vendor/bin/phpstan analyse
	# docker compose exec php ./vendor/bin/ecs check
